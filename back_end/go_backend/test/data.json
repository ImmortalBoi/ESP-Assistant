{
  "code": "\n\n#define CONFIG_ESP32_COREDUMP_DATA_FORMAT_ELF\n#define CONFIG_ESP32_COREDUMP_ENABLE\n#define THINGNAME \"device_6d3f914d-3fd4-423e-891a-dcc0de83c5e9\"  //change this\n#define AWS_IOT_PUBLISH_TOPIC \"users/device_dc7ff370-c543-47a1-8ea4-8c3b19debcbb/devices/device_6d3f914d-3fd4-423e-891a-dcc0de83c5e9data\"\n#define AWS_IOT_SUBSCRIBE_TOPIC \"users/device_dc7ff370-c543-47a1-8ea4-8c3b19debcbb/phone/data\"\n\n//Static-Libraries:\n#include \u003cWebServer.h\u003e\n#include \u003curi/UriBraces.h\u003e\n#include \u003cUpdate.h\u003e\n#include \u003cWiFi.h\u003e\n#include \u003cHTTPClient.h\u003e\n#include \u003cPreferences.h\u003e\n#include \u003cPubSubClient.h\u003e\n#include \u003cArduinoJson.h\u003e\n#include \u003cESP32Servo.h\u003e\n\n// Program Instances \u0026 Global Values:\nPreferences preferences;\nWebServer server(80);\nWiFiClientSecure espClient = WiFiClientSecure();\nHTTPClient http;\nPubSubClient client(espClient);\nString fileURL = \"https://esp32-assistant-bucket.s3.eu-central-1.amazonaws.com/User-sketches/test/4/testing.ino.bin\";\nlong contentLength = 0;\nbool isValidContentType = false;\nStaticJsonDocument\u003c200\u003e receivedJson;\nWebServer server;\nWiFiClientSecure espClient;\nPubSubClient client;\n\nconst char AWS_IOT_ENDPOINT[] = \"a2a8tevfyn336a-ats.iot.eu-central-1.amazonaws.com\";  //change this\n\n// Amazon Root CA 1\nstatic const char AWS_CERT_CA[] PROGMEM = R\"EOF(\n-----BEGIN CERTIFICATE-----\nMIIDQTCCAimgAwIBAgITBmyfz5m/jAo54vB4ikPmljZbyjANBgkqhkiG9w0BAQsF\nADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6\nb24gUm9vdCBDQSAxMB4XDTE1MDUyNjAwMDAwMFoXDTM4MDExNzAwMDAwMFowOTEL\nMAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJv\nb3QgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJ4gHHKeNXj\nca9HgFB0fW7Y14h29Jlo91ghYPl0hAEvrAIthtOgQ3pOsqTQNroBvo3bSMgHFzZM\n9O6II8c+6zf1tRn4SWiw3te5djgdYZ6k/oI2peVKVuRF4fn9tBb6dNqcmzU5L/qw\nIFAGbHrQgLKm+a/sRxmPUDgH3KKHOVj4utWp+UhnMJbulHheb4mjUcAwhmahRWa6\nVOujw5H5SNz/0egwLX0tdHA114gk957EWW67c4cX8jJGKLhD+rcdqsq08p8kDi1L\n93FcXmn/6pUCyziKrlA4b9v7LWIbxcceVOF34GfID5yHI9Y/QCB/IIDEgEw+OyQm\njgSubJrIqg0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC\nAYYwHQYDVR0OBBYEFIQYzIU07LwMlJQuCFmcx7IQTgoIMA0GCSqGSIb3DQEBCwUA\nA4IBAQCY8jdaQZChGsV2USggNiMOruYou6r4lK5IpDB/G/wkjUu0yKGX9rbxenDI\nU5PMCCjjmCXPI6T53iHTfIUJrU6adTrCC2qJeHZERxhlbI1Bjjt/msv0tadQ1wUs\nN+gDS63pYaACbvXy8MWy7Vu33PqUXHeeE6V/Uq2V8viTO96LXFvKWlJbYK8U90vv\no/ufQJVtMVT8QtPHRh8jrdkPSHCa2XV4cdFyQzR1bldZwgJcJmApzyMZFo6IQ6XU\n5MsI+yMRQ+hDKXJioaldXgjUkK642M4UwtBV8ob2xJNDd2ZhwLnoQdeXeGADbkpy\nrqXRfboQnoZsG4q5WTP468SQvvG5\n-----END CERTIFICATE-----\n)EOF\";\n\n// Device Certificate                                               //change this\nstatic const char AWS_CERT_CRT[] PROGMEM = R\"KEY(-----BEGIN CERTIFICATE-----\nMIIDWjCCAkKgAwIBAgIVAIh7sjnOwD6V0ckpH1HMpNr05kBMMA0GCSqGSIb3DQEB\nCwUAME0xSzBJBgNVBAsMQkFtYXpvbiBXZWIgU2VydmljZXMgTz1BbWF6b24uY29t\nIEluYy4gTD1TZWF0dGxlIFNUPVdhc2hpbmd0b24gQz1VUzAeFw0yNDA0MjYxNTAw\nMjVaFw00OTEyMzEyMzU5NTlaMB4xHDAaBgNVBAMME0FXUyBJb1QgQ2VydGlmaWNh\ndGUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDcO88e5af898Ic7u6n\nLhNzkWqMMltF4ZyUiWkSn4AmmuMVfnxTv3rrQXkbFLCxQo/4J8oQ9BnbhfMN4blV\nF2OqwnvOzE3BLew62+zrUzt+qzfFwR2CwrgkhiNNIlzC8cBiLCgPLXcm2IKawQVJ\nRBfXfr+pevrle5JHfp4eGa1KCfYkiYhyhrv+FVY8pDn1go1MU7XOrOtm4mjftb+M\nlg7TiUxzLwLTjqLAzB17m/2yymkB7kY2hDQEAQHPUuS8U39P0GosvzMzn5+0Ln71\nzMTHWbHGyvP3GcTagzmbmmz/38qvdD0RS+thChNzq+I55RvktDZDCfGDmohiOuKb\nit2fAgMBAAGjYDBeMB8GA1UdIwQYMBaAFL7ZR1TWQLWRSvrO4zQtBLBXyeNrMB0G\nA1UdDgQWBBTbPY0t6VgsQxw5tgbob3yaH6afSzAMBgNVHRMBAf8EAjAAMA4GA1Ud\nDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEANzJ7mWc080icsIMQr3FIfLr3\nNv7VKIBmi4ngIrzgpWO4jDP9YaQGgbL8tRsOEJCAx6rpr/pwqcCbeHh4y3LcjcfY\n9HjwQqjvwR+/cQSphSRhX1IhjpWH/+aHB4sZUAuqJvNr8c3Uln4FNxHA08o6F2cm\nYg/HzT5a87x5Auwyqb5/HH0cXVXc3+TQE3yAfEurUFhM4NCApJ/8dlOXSrmmx1aS\nAcvJcLP0DT/clT6tDmnbOnFjYHoMCNTMIrrmMg5PKFry9kEFXjDYaNmvNXuulVwM\nrSFY8ig0TcCNKV+5I0rXTNXd3HCB9bkkt1Z8RP3iG7Wt0ZJeN0gkYJiBDqK4bg==\n-----END CERTIFICATE-----\n)KEY\";\n\n// Device Private Key                                               //change this\nstatic const char AWS_CERT_PRIVATE[] PROGMEM = R\"KEY(-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEA3DvPHuWn/PfCHO7upy4Tc5FqjDJbReGclIlpEp+AJprjFX58\nU79660F5GxSwsUKP+CfKEPQZ24XzDeG5VRdjqsJ7zsxNwS3sOtvs61M7fqs3xcEd\ngsK4JIYjTSJcwvHAYiwoDy13JtiCmsEFSUQX136/qXr65XuSR36eHhmtSgn2JImI\ncoa7/hVWPKQ59YKNTFO1zqzrZuJo37W/jJYO04lMcy8C046iwMwde5v9ssppAe5G\nNoQ0BAEBz1LkvFN/T9BqLL8zM5+ftC5+9czEx1mxxsrz9xnE2oM5m5ps/9/Kr3Q9\nEUvrYQoTc6viOeUb5LQ2Qwnxg5qIYjrim4rdnwIDAQABAoIBACgpI/D/ci3YRGag\nT5be+R8XAnYEbM6GgNY5ZJbHzUe88PIneaaQAWtLKjl9AWehur1HDDshOGHmwFbk\ntbZFqKAoDQm+CePTawOkvUSAjhXgRTBjsez5czj92Qwk2wOVsD52zOtPoC3OR6rO\nzhb5OtvKOks+qOgWK6ur9EuK5SXd6ou/Vbq+vfjJ1JvBjqeAdjuvC59kLpi8ZBXW\neG1Ys1YVB98IYi8CKnU3JTyTxT53J6VQ012cRbOw0I6NfUeo0YSPItujS23OFOJa\ngZzEipQC1XhEWPybPRrc3A/i9cepSFFUCB5ShzAhJB6w1WTu18a/4w/1NxrNJCPh\ntu0iELkCgYEA81VrObAFvPPmbPR8HroxcsX0xoN7xXxmAN6uhOGtgwFgXDKKsc/C\n7mDqDLLcjdRgYwhxQzLVV7bk7vltT446/fwnSPaVCNTG+LB/z8F10zsTxn6q8zaJ\nEPCCj15Le51i+HALKE4hErO0M6UarKMlCH9ybAD2a4+xflEYVAaXlZMCgYEA57KR\nJ+Eap1pjD/oIDVQOK1ZL7YydhCXX4H26bg9ehG93Z2TF9sK2Ox/oWoVALgmh/laz\nmUsblfo+MQ1rJR/pvWH0rAXxdpVk5qrteDChapBKmZSk3uiIGQoc9qcl6GVmRAAg\nPaWoNh85CVhuuFM0lviIP0MIxMeV3RUvxxfaX0UCgYAMviRnWPhz9LHUctktIsME\nJ6mx26DXrrQIx6CMBOV5PtE1AtCQjzi+EwUutQ8nvj9t8Ds+MaNKfKFwgk9fIyuj\nsVi9UWxskff5fgSzdIYfEbDvbCK3qdtzr6SmrWF2j79nEzcCXVUODasaKUNEVybR\nUxtC3KoK5/N7kfOcMtwtUQKBgBpibEM1UBq0oUlFeLtD0iU/O4A+ngVZZd7rklpM\nJ8A/DULZ5+00uRm8hXIhcHCNqkPTTbpsIiUPDRv64jOlEbH+QKWCO7/8PTRDTK1+\nJDOFYOliUvALXMw1KZ0w5ZE0UtP1i7ZZcfFP1ufoiRs2Zmu2u5UwpgP6kmdNrVYn\nsjddAoGAO9B3pG1oF07oJW1sdKAin1lGsUluFYym1w/Zkj2oVtVOq70NjHZi2tnX\nt6flgRIGncpvNFGjl6PotQuwDU9pEytGkRdFgcPELzgcYgwZO4x8ftQYlhE3dtkD\nGXotpew8/6GUovUqPa8iE5O7wug+xRTPuX0NeFKhV2sj1XSRdDE=\n-----END RSA PRIVATE KEY-----\n)KEY\";\n\n\n// OTA Logic\nvoid execOTA() { //start of non-generated function\n  Serial.println(\"Connecting to: \" + String(fileURL));\n\n  http.begin(fileURL);        // Specify the URL\n  int httpCode = http.GET();  // Make the request\n\n  if (httpCode \u003e 0) {  // Check for the returning code\n    // Get the payload\n    Stream\u0026 payload = http.getStream();\n\n    // Check if the HTTP Response is 200\n    if (httpCode == HTTP_CODE_OK) {\n      // Check if there is enough to OTA Update\n      bool canBegin = Update.begin(http.getSize());\n\n      // If yes, begin\n      if (canBegin) {\n        Serial.println(\"Begin OTA. This may take 2 - 5 mins to complete. Things might be quite for a while.. Patience!\");\n        size_t written = Update.writeStream(payload);\n\n        if (written == http.getSize()) {\n          Serial.println(\"Written : \" + String(written) + \" successfully\");\n        } else {\n          Serial.println(\"Written only : \" + String(written) + \"/\" + String(http.getSize()) + \". Retry?\");\n        }\n\n        if (Update.end()) {\n          Serial.println(\"OTA done!\");\n          if (Update.isFinished()) {\n            Serial.println(\"Update successfully completed. Rebooting.\");\n            ESP.restart();\n          } else {\n            Serial.println(\"Update not finished? Something went wrong!\");\n          }\n        } else {\n          Serial.println(\"Error Occurred. Error #: \" + String(Update.getError()));\n        }\n      } else {\n        // not enough space to begin OTA\n        Serial.println(\"Not enough space to begin OTA\");\n      }\n    } else {\n      Serial.println(\"Got a non 200 status code from server. Exiting OTA Update.\");\n    }\n  } else {\n    Serial.println(\"Failed to connect to server. Exiting OTA Update.\");\n  }\n\n  http.end();  // End the connection\n} //end of non-generated function\n\nvoid printSuccess() { //start of non-generated function\n  StaticJsonDocument\u003c200\u003e sentJson;\n  sentJson[\"type\"] = \"done\";\n  char jsonBuffer[512];\n  serializeJson(sentJson, jsonBuffer);\n  Serial.println(\"Message published!\");\n  Serial.println(\"ESP Working!!\");\n  client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);\n} //end of non-generated function\n\n\nvoid wifiSetup() { //start of non-generated function\n  String wifiIndex = \"\";\n  String pass = \"\";\n  unsigned long previousMillis = 0;\n  const long interval = 10000;\n  if (preferences.getString(\"wifiIndex\", \"\") != \"\") {  //fetch wifi credis from flash mem\n    Serial.println(\"Fetching Wifi\");\n\n    wifiIndex = preferences.getString(\"wifiIndex\", \"\");\n    pass = preferences.getString(\"pass\", \"\");\n\n    WiFi.begin(wifiIndex, pass, 6);\n\n    Serial.print(\"Connecting to WiFi\");\n\n    while (WiFi.status() != WL_CONNECTED) {\n      unsigned long currentMillis = millis();\n      delay(1000);\n      Serial.print(\".\");\n      if (currentMillis - previousMillis \u003e= interval) {\n        preferences.putString(\"wifiIndex\", \"\");\n        preferences.putString(\"pass\", \"\");\n        wifiSetup();\n      }\n    }\n    Serial.println(\"Connected!\");\n    return;\n  }\n  String password_AP = \"12345678\";\n  String ssid_AP = \"ESP32\";\n  WiFi.softAP(ssid_AP, password_AP);\n  Serial.println(\"Created AP\");\n  Serial.print(\"ESP AP IP: \");\n  Serial.println(WiFi.softAPIP());\n\n  server.on(UriBraces(\"/reply\"), HTTP_GET, []() {\n    Serial.println(\"Request sent\");\n    int n = WiFi.scanNetworks();\n    String json;\n    StaticJsonDocument\u003c200\u003e doc;\n    JsonArray wifiArray = doc.createNestedArray(\"wifi\");\n    if (n == 0) {\n      Serial.println(\"no networks found\");\n    } else {\n      for (int i = 0; i \u003c n; ++i) {\n        wifiArray.add(WiFi.SSID(i));  // Add the copied string to the JSON array\n      }\n\n      serializeJson(doc, json);\n\n      server.send(200, \"application/json\", json);\n      WiFi.scanDelete();  // Delete the old scan results\n    }\n  }); \n\n  server.on(UriBraces(\"/wifi/{}/pass/{}\"), HTTP_GET, []() {\n    Serial.println(\"input Recieved\");\n    String wifiIndex = server.pathArg(0);\n    String pass = server.pathArg(1);\n    wifiIndex.replace(\"%20\", \" \");\n    Serial.println(wifiIndex);\n    Serial.println(pass);\n\n    WiFi.begin(wifiIndex, pass, 6);\n    Serial.print(\"Connecting to WiFi\");\n\n    while (WiFi.status() != WL_CONNECTED) {\n      delay(1000);\n      Serial.print(\".\");\n    }\n    Serial.println(\"Connected!\");\n    preferences.putString(\"wifiIndex\", wifiIndex);\n    preferences.putString(\"pass\", pass);\n  });\n\n  server.begin();\n  Serial.println(\"HTTP server started\");\n  while (WiFi.status() != WL_CONNECTED) {\n    if (WiFi.softAPgetStationNum() \u003e 0) {\n      Serial.println(\"Client connected\");\n    }\n    server.handleClient();\n    delay(3000);\n  }\n} //end of non-generated function\n\nvoid connectAWS() { //start of non-generated function\n  // Configure WiFiClientSecure to use the AWS IoT device credentials\n  espClient.setCACert(AWS_CERT_CA);\n  espClient.setCertificate(AWS_CERT_CRT);\n  espClient.setPrivateKey(AWS_CERT_PRIVATE);\n\n  // Connect to the MQTT broker on the AWS endpoint we defined earlier\n  client.setServer(AWS_IOT_ENDPOINT, 8883);\n\n  // Create a message handler\n  client.setCallback(messageHandler);\n\n  Serial.println(\"Connecting to AWS IoT\");\n\n  while (!client.connect(THINGNAME)) {\n    Serial.print(\".\");\n    delay(100);\n  } \n\n  if (!client.connected()) {\n    Serial.println(\"AWS IoT Timeout!\");\n    return;\n  }\n\n  // Subscribe to a topic\n  client.subscribe(AWS_IOT_SUBSCRIBE_TOPIC);\n  Serial.println(\"AWS IoT Connected!\");\n} //end of non-generated function\n\nvoid messageHandler(char* topic, byte* payload, unsigned int length) {\n  Serial.print(\"incoming: \");\n  Serial.println(topic);\n  String tpc(topic);\n  deserializeJson(receivedJson, payload);\n  Serial.println(tpc);\n  const char* type = receivedJson[\"type\"];\n  String typ(type);\n  const uint8_t value = receivedJson[\"value\"];\n  const uint8_t pin = receivedJson[\"pin\"];\n  if (1 == receivedJson[\"active\"]) { \n  }\n  if (typ.equals(\"motor1pin1\")) {   \n    Serial.println(\"motor1pin1 called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if (typ.equals(\"motor1pin2\")) {   \n    Serial.println(\"motor1pin2 called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if (typ.equals(\"motor2pin1\")) {   \n    Serial.println(\"motor2pin1 called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if (typ.equals(\"motor2pin2\")) {   \n    Serial.println(\"motor2pin2 called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if (typ.equals(\"motor1En\")) {   \n    Serial.println(\"motor1En called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if (typ.equals(\"motor2En\")) {   \n    Serial.println(\"motor2En called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if(typ.equals(\"update\")){\n    Serial.println(\"update called\");\n    execOTA();\n  }\n}\n\n\nvoid publishMessage() {\n  StaticJsonDocument\u003c200\u003e sentJson;\n  char jsonBuffer[512];\n  serializeJson(sentJson, jsonBuffer);\n  Serial.println(\"Message published!\");\n  client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);\n}\n\n\nvoid setup() {\n  Serial.begin(115200);\n  WiFi.mode(WIFI_AP_STA);\n  WiFi.disconnect();\n  preferences.begin(\"my-app\", false);\n  wifiSetup();\n  connectAWS();\n  printSuccess();\n  pinMode(27, OUTPUT);\n  pinMode(26, OUTPUT);\n  pinMode(25, OUTPUT);\n  pinMode(33, OUTPUT);\n  pinMode(14, OUTPUT);\n  pinMode(32, OUTPUT);\n}\n \n\n\nvoid loop() { //start of non-generated function\n  client.loop();\n  if (1 == receivedJson[\"send_data\"]) {\n    publishMessage() ;\n  }\n  if (WiFi.status() != WL_CONNECTED) {\n    Serial.println(\"Connecting to wifi...\");\n    delay(5000);\n    if (WiFi.status() == WL_CONNECTED) {\n      Serial.println(\"Connected...\");\n      connectAWS();\n    }\n    delay(1000);\n  }\n} //end of non-generated function\n",
  "compileRequestResp": "{\"msg\":\"/usr/src/sketch/dist/testing\"}\n",
  "globalDeclarations": "Preferences preferences;\nWebServer server(80);\nWiFiClientSecure espClient = WiFiClientSecure();\nHTTPClient http;\nPubSubClient client(espClient);\nString fileURL = \"https://esp32-assistant-bucket.s3.eu-central-1.amazonaws.com/User-sketches/test/4/testing.ino.bin\";\nlong contentLength = 0;\nbool isValidContentType = false;\nStaticJsonDocument\u003c200\u003e receivedJson;\nWebServer server;\nWiFiClientSecure espClient;\nPubSubClient client;",
  "libraries": ["WiFi", "HTTPClient", "Preferences", "PubSubClient", "ArduinoJson", "ESP32Servo"],
  "messageHandler": "void messageHandler(char* topic, byte* payload, unsigned int length) {\n  Serial.print(\"incoming: \");\n  Serial.println(topic);\n  String tpc(topic);\n  deserializeJson(receivedJson, payload);\n  Serial.println(tpc);\n  const char* type = receivedJson[\"type\"];\n  String typ(type);\n  const uint8_t value = receivedJson[\"value\"];\n  const uint8_t pin = receivedJson[\"pin\"];\n  if (1 == receivedJson[\"active\"]) { \n  }\n  if (typ.equals(\"motor1pin1\")) {   \n    Serial.println(\"motor1pin1 called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if (typ.equals(\"motor1pin2\")) {   \n    Serial.println(\"motor1pin2 called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if (typ.equals(\"motor2pin1\")) {   \n    Serial.println(\"motor2pin1 called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if (typ.equals(\"motor2pin2\")) {   \n    Serial.println(\"motor2pin2 called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if (typ.equals(\"motor1En\")) {   \n    Serial.println(\"motor1En called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if (typ.equals(\"motor2En\")) {   \n    Serial.println(\"motor2En called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if(typ.equals(\"update\")){\n    Serial.println(\"update called\");\n    execOTA();\n  }\n}\n",
  "publishMessage": "void publishMessage() {\n  StaticJsonDocument\u003c200\u003e sentJson;\n  char jsonBuffer[512];\n  serializeJson(sentJson, jsonBuffer);\n  Serial.println(\"Message published!\");\n  client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);\n}\n",
  "reply": "##Generated Libraries \n*   Preferences \n*   WebServer \n*   WiFiClientSecure\n*   HTTPClient\n*   PubSubClient\n*   ArduinoJson\n*   ESP32Servo\n\n##Global Variables\n\n```cpp\nPreferences preferences;\nWebServer server;\nWiFiClientSecure espClient;\nHTTPClient http;\nPubSubClient client;\nStaticJsonDocument\u003c200\u003e receivedJson;\n```\n\n##Publish Message Function\n\n```cpp\nvoid publishMessage() {\n  StaticJsonDocument\u003c200\u003e sentJson;\n  char jsonBuffer[512];\n  serializeJson(sentJson, jsonBuffer);\n  Serial.println(\"Message published!\");\n  client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);\n}\n```\n\n##Message Handler Function\n\n```cpp\nvoid messageHandler(char* topic, byte* payload, unsigned int length) {\n  Serial.print(\"incoming: \");\n  Serial.println(topic);\n  String tpc(topic);\n  deserializeJson(receivedJson, payload);\n  Serial.println(tpc);\n  const char* type = receivedJson[\"type\"];\n  String typ(type);\n  const uint8_t value = receivedJson[\"value\"];\n  const uint8_t pin = receivedJson[\"pin\"];\n  if (1 == receivedJson[\"active\"]) { \n  }\n  if (typ.equals(\"motor1pin1\")) {   \n    Serial.println(\"motor1pin1 called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if (typ.equals(\"motor1pin2\")) {   \n    Serial.println(\"motor1pin2 called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if (typ.equals(\"motor2pin1\")) {   \n    Serial.println(\"motor2pin1 called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if (typ.equals(\"motor2pin2\")) {   \n    Serial.println(\"motor2pin2 called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if (typ.equals(\"motor1En\")) {   \n    Serial.println(\"motor1En called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if (typ.equals(\"motor2En\")) {   \n    Serial.println(\"motor2En called\");\n    Serial.println(value);\n    Serial.println(pin);\n    digitalWrite(pin, value);\n  }\n  else if(typ.equals(\"update\")){\n    Serial.println(\"update called\");\n    execOTA();\n  }\n}\n```\n\n##Setup Function\n\n```cpp\nvoid setup() {\n  Serial.begin(115200);\n  WiFi.mode(WIFI_AP_STA);\n  WiFi.disconnect();\n  preferences.begin(\"my-app\", false);\n  wifiSetup();\n  connectAWS();\n  printSuccess();\n  pinMode(27, OUTPUT);\n  pinMode(26, OUTPUT);\n  pinMode(25, OUTPUT);\n  pinMode(33, OUTPUT);\n  pinMode(14, OUTPUT);\n  pinMode(32, OUTPUT);\n}\n``` \n",
  "setup": "void setup() {\n  Serial.begin(115200);\n  WiFi.mode(WIFI_AP_STA);\n  WiFi.disconnect();\n  preferences.begin(\"my-app\", false);\n  wifiSetup();\n  connectAWS();\n  printSuccess();\n  pinMode(27, OUTPUT);\n  pinMode(26, OUTPUT);\n  pinMode(25, OUTPUT);\n  pinMode(33, OUTPUT);\n  pinMode(14, OUTPUT);\n  pinMode(32, OUTPUT);\n}\n \n",
  "updateDynamoDB": "No error"
}
